
import {createRequire as ___nfyCreateRequire} from "module";
import {fileURLToPath as ___nfyFileURLToPath} from "url";
import {dirname as ___nfyPathDirname} from "path";
let __filename=___nfyFileURLToPath(import.meta.url);
let __dirname=___nfyPathDirname(___nfyFileURLToPath(import.meta.url));
let require=___nfyCreateRequire(import.meta.url);


// netlify/functions/silly_story.mjs
function randomValueFromArray(array) {
  const random = Math.floor(Math.random() * array.length);
  return array[random];
}
var silly_story_default = async (req) => {
  const xItems = ["Willy the Goblin", "Big Daddy", "Father Christmas"];
  const yItems = ["the soup kitchen", "Disneyland", "the White House"];
  const zItems = ["spontaneously combusted", "melted into a puddle on the sidewalk", "turned into a slug and crawled away"];
  const newXItem = randomValueFromArray(xItems);
  const newYItem = randomValueFromArray(yItems);
  const newZItem = randomValueFromArray(zItems);
  const temperature = 94;
  const weight = 300;
  let unitTemperature = "fahrenheit";
  let unitWeight = "pounds";
  let finalTemperature = temperature;
  let finalWeight = weight;
  const unitSystem = new URLSearchParams(req.url.split("?")[1]).get("unitSystem") || "us";
  if (unitSystem === "uk") {
    finalTemperature = Math.round((temperature - 32) * (5 / 9));
    unitTemperature = "centigrade";
    finalWeight = Math.round(weight / 14);
    unitWeight = "stone";
  }
  const story = `It was ${finalTemperature} ${unitTemperature} outside, so ${newXItem} went for a walk. When they got to ${newYItem}, they stared in horror for a few moments, then ${newZItem}. Someone saw the whole thing, but was not surprised \u2014 ${newXItem} weighs ${finalWeight} ${unitWeight}, and it was a hot day.`;
  const data = { message: story };
  return new Response(JSON.stringify(data), {
    headers: { "Content-Type": "application/json" }
  });
};
export {
  silly_story_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibmV0bGlmeS9mdW5jdGlvbnMvc2lsbHlfc3RvcnkubWpzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJmdW5jdGlvbiByYW5kb21WYWx1ZUZyb21BcnJheShhcnJheSkge1xyXG4gICAgY29uc3QgcmFuZG9tID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYXJyYXkubGVuZ3RoKTtcclxuICAgIHJldHVybiBhcnJheVtyYW5kb21dO1xyXG4gIH1cclxuICBcclxuICBleHBvcnQgZGVmYXVsdCBhc3luYyAocmVxKSA9PiB7XHJcbiAgICBjb25zdCB4SXRlbXMgPSBbJ1dpbGx5IHRoZSBHb2JsaW4nLCAnQmlnIERhZGR5JywgJ0ZhdGhlciBDaHJpc3RtYXMnXTtcclxuICAgIGNvbnN0IHlJdGVtcyA9IFsndGhlIHNvdXAga2l0Y2hlbicsICdEaXNuZXlsYW5kJywgJ3RoZSBXaGl0ZSBIb3VzZSddO1xyXG4gICAgY29uc3Qgekl0ZW1zID0gWydzcG9udGFuZW91c2x5IGNvbWJ1c3RlZCcsICdtZWx0ZWQgaW50byBhIHB1ZGRsZSBvbiB0aGUgc2lkZXdhbGsnLCAndHVybmVkIGludG8gYSBzbHVnIGFuZCBjcmF3bGVkIGF3YXknXTtcclxuICBcclxuICAgIGNvbnN0IG5ld1hJdGVtID0gcmFuZG9tVmFsdWVGcm9tQXJyYXkoeEl0ZW1zKTtcclxuICAgIGNvbnN0IG5ld1lJdGVtID0gcmFuZG9tVmFsdWVGcm9tQXJyYXkoeUl0ZW1zKTtcclxuICAgIGNvbnN0IG5ld1pJdGVtID0gcmFuZG9tVmFsdWVGcm9tQXJyYXkoekl0ZW1zKTtcclxuICBcclxuICAgIGNvbnN0IHRlbXBlcmF0dXJlID0gOTQ7XHJcbiAgICBjb25zdCB3ZWlnaHQgPSAzMDA7XHJcbiAgICBsZXQgdW5pdFRlbXBlcmF0dXJlID0gJ2ZhaHJlbmhlaXQnO1xyXG4gICAgbGV0IHVuaXRXZWlnaHQgPSAncG91bmRzJztcclxuICAgIGxldCBmaW5hbFRlbXBlcmF0dXJlID0gdGVtcGVyYXR1cmU7XHJcbiAgICBsZXQgZmluYWxXZWlnaHQgPSB3ZWlnaHQ7XHJcbiAgXHJcbiAgICBjb25zdCB1bml0U3lzdGVtID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhyZXEudXJsLnNwbGl0KCc/JylbMV0pLmdldCgndW5pdFN5c3RlbScpIHx8ICd1cyc7XHJcblxyXG4gICAgaWYgKHVuaXRTeXN0ZW0gPT09ICd1aycpIHtcclxuICAgICAgZmluYWxUZW1wZXJhdHVyZSA9IE1hdGgucm91bmQoKHRlbXBlcmF0dXJlIC0gMzIpICogKDUgLyA5KSk7XHJcbiAgICAgIHVuaXRUZW1wZXJhdHVyZSA9ICdjZW50aWdyYWRlJztcclxuICAgICAgZmluYWxXZWlnaHQgPSBNYXRoLnJvdW5kKHdlaWdodCAvIDE0KTsgXHJcbiAgICAgIHVuaXRXZWlnaHQgPSAnc3RvbmUnO1xyXG4gICAgfVxyXG4gIFxyXG4gICAgY29uc3Qgc3RvcnkgPSBgSXQgd2FzICR7ZmluYWxUZW1wZXJhdHVyZX0gJHt1bml0VGVtcGVyYXR1cmV9IG91dHNpZGUsIHNvICR7bmV3WEl0ZW19IHdlbnQgZm9yIGEgd2Fsay4gV2hlbiB0aGV5IGdvdCB0byAke25ld1lJdGVtfSwgdGhleSBzdGFyZWQgaW4gaG9ycm9yIGZvciBhIGZldyBtb21lbnRzLCB0aGVuICR7bmV3Wkl0ZW19LiBTb21lb25lIHNhdyB0aGUgd2hvbGUgdGhpbmcsIGJ1dCB3YXMgbm90IHN1cnByaXNlZCBcdTIwMTQgJHtuZXdYSXRlbX0gd2VpZ2hzICR7ZmluYWxXZWlnaHR9ICR7dW5pdFdlaWdodH0sIGFuZCBpdCB3YXMgYSBob3QgZGF5LmA7XHJcbiAgXHJcbiAgICBjb25zdCBkYXRhID0geyBtZXNzYWdlOiBzdG9yeSB9O1xyXG4gIFxyXG4gICAgcmV0dXJuIG5ldyBSZXNwb25zZShKU09OLnN0cmluZ2lmeShkYXRhKSwge1xyXG4gICAgICBoZWFkZXJzOiB7IFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiIH0sXHJcbiAgICB9KTtcclxufTsiXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7O0FBQUEsU0FBUyxxQkFBcUIsT0FBTztBQUNqQyxRQUFNLFNBQVMsS0FBSyxNQUFNLEtBQUssT0FBTyxJQUFJLE1BQU0sTUFBTTtBQUN0RCxTQUFPLE1BQU0sTUFBTTtBQUNyQjtBQUVBLElBQU8sc0JBQVEsT0FBTyxRQUFRO0FBQzVCLFFBQU0sU0FBUyxDQUFDLG9CQUFvQixhQUFhLGtCQUFrQjtBQUNuRSxRQUFNLFNBQVMsQ0FBQyxvQkFBb0IsY0FBYyxpQkFBaUI7QUFDbkUsUUFBTSxTQUFTLENBQUMsMkJBQTJCLHdDQUF3QyxxQ0FBcUM7QUFFeEgsUUFBTSxXQUFXLHFCQUFxQixNQUFNO0FBQzVDLFFBQU0sV0FBVyxxQkFBcUIsTUFBTTtBQUM1QyxRQUFNLFdBQVcscUJBQXFCLE1BQU07QUFFNUMsUUFBTSxjQUFjO0FBQ3BCLFFBQU0sU0FBUztBQUNmLE1BQUksa0JBQWtCO0FBQ3RCLE1BQUksYUFBYTtBQUNqQixNQUFJLG1CQUFtQjtBQUN2QixNQUFJLGNBQWM7QUFFbEIsUUFBTSxhQUFhLElBQUksZ0JBQWdCLElBQUksSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLFlBQVksS0FBSztBQUVuRixNQUFJLGVBQWUsTUFBTTtBQUN2Qix1QkFBbUIsS0FBSyxPQUFPLGNBQWMsT0FBTyxJQUFJLEVBQUU7QUFDMUQsc0JBQWtCO0FBQ2xCLGtCQUFjLEtBQUssTUFBTSxTQUFTLEVBQUU7QUFDcEMsaUJBQWE7QUFBQSxFQUNmO0FBRUEsUUFBTSxRQUFRLFVBQVUsZ0JBQWdCLElBQUksZUFBZSxnQkFBZ0IsUUFBUSxzQ0FBc0MsUUFBUSxtREFBbUQsUUFBUSwrREFBMEQsUUFBUSxXQUFXLFdBQVcsSUFBSSxVQUFVO0FBRWxTLFFBQU0sT0FBTyxFQUFFLFNBQVMsTUFBTTtBQUU5QixTQUFPLElBQUksU0FBUyxLQUFLLFVBQVUsSUFBSSxHQUFHO0FBQUEsSUFDeEMsU0FBUyxFQUFFLGdCQUFnQixtQkFBbUI7QUFBQSxFQUNoRCxDQUFDO0FBQ0w7IiwKICAibmFtZXMiOiBbXQp9Cg==
